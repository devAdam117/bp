}
#funkcia p sluzi na vypocitanie, konkretneho p(i) ako vstupne argumenty berie
# n - kolkate konkretne p(n) chceme vypocitat
# lambdas - lambdy, ktore sme dostali z funkcie showResult()
# cecka - cecka, ktore sme dostali z funkcie showResult()
#Ak by sme chceli vediet p(20), pre typ kocky so 6 stenami, tak vykoname nasledovne:
#Zistime lambdy a cecka pre kocku so 6 stenami:
# kockaResult <- showResult(6)
#Potom vysledne lambdy a cecka z kockaResult zoberieme ako vstupne parametre do funkcie p
#p(20,normalKocka$lambdas,normalKocka$cecka)
p <- function(n,lambdas,cecka){
lambdas <- lambdas^n
return (cecka %*% lambdas)
}
kockaNova <- showResult(50)
kockaNova <- showResult(100)
kockaNova <- showResult(70)
kockaNova <- showResult(80)
kockaNova <- showResult(70)
kockaNova <- showResult(90)
kockaNova <- showResult(120)
kockaNova <- showResult(140)
kockaNova <- showResult(150)
kockaNova <- showResult(160)
kockaNova <- showResult(200)
kockaNova <- showResult(220)
kockaNova <- showResult(240)
kockaNova <- showResult(260)
kockaNova <- showResult(280)
kockaNova <- showResult(281)
brig <- c(7,6,10,5,6,8,10,6,5,7.5,7,6,12,6,6,6,7,6,7,7.33,11.2,5,8,7,6,5,7)
mean(brig)
length(brig)
ks.test(brig,"pnorm",mean=mean(brig),sd=sd(brig))
t.test(brig, alternative="two.sided",var.equal=FALSE)
brig <- c(7,6,10,5,6,8,10,6,5,7.5,7,6,12,6,6,6,7,6,7,7.33,11.2,5,8,7,6,5,7,10)
ks.test(brig,"pnorm",mean=mean(brig),sd=sd(brig))
brig <- c(7,6,10,5,6,8,10,6,5,7.5,7,6,12,6,6,6,7,6,7,7.33,11.2,5,8,7,6,5,7,10,8,12.5,8.5)
ks.test(brig,"pnorm",mean=mean(brig),sd=sd(brig))
t.test(brig, alternative="two.sided",var.equal=FALSE)
list(assecco=1,vacumlabs=2)
list(orange=c(5),msgLife=c(8))
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=0
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=1
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=2
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=3
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=4
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
x=5
2^x + ((-2^(x+1)+3*2^x*x-2*x+2)/2)
qnorm(1)
qnorm(0.5)
qnorm(0.51)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "0", "1s", "2s", "3s"))
curve(x=1.96)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "0", "1s", "2s", "3s"))
line(x=1.96)
abline(1)
abline(1,1)
abline(1,0)
abline(0,1)
abline(0,900)
abline(1.96,900)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "0", "1s", "2s", "3s"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at = -1.96:1.96, labels = c( "2s", "3s"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "2s", "3s"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "k1", "k2"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "k1", "k2"))
axis(1, at =1:8)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "k1", "k2"))
axis(1, at =-8:8)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "k1", "k2"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -1.96,1.96), labels = c( "k1", "k2"))
axis(1, at =-8:8)
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -4,-3,-1.96,0,1.96,3,4), labels = c( "k1", "k2"))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -4,-3,-1.96,0,1.96,3,4), labels = c("","", "k1", "","k2","",""))
x <- seq(-4, 4, length=100)
#create a vector of values that shows the height of the probability distribution
#for each value in x
y <- dnorm(x)
#plot x and y as a scatterplot with connected lines (type = "l") and add
#an x-axis with custom labels
plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
axis(1, at =c( -4,-3,-1.96,0,1.96,3,4), labels = c("-4","-3", "1.96", "0","1.96","3","4"))
qnorm(.95)
qnorm(.97.5)
qnorm(.975)
randomP = runif(n=1, min=1e-12, max=.9999999999) # skutocna ocakavana pravdepodobnost nespravneho vyplnenia
n
n = 200
randomP = runif(n=1, min=1e-12, max=.9999999999) # skutocna ocakavana pravdepodobnost nespravneho vyplnenia
randomP
pHat <- sum(rbinom(1:n,1,randomP))/n
pHAT
pHat
n
randomP = runif(n=1, min=1e-12, max=.9999999999) # skutocna ocakavana pravdepodobnost nespravneho vyplnenia
randomP
randomP = runif(n=1, min=1e-12, max=.9999999999) # skutocna ocakavana pravdepodobnost nespravneho vyplnenia
randomP
randomP = runif(n=1, min=1e-12, max=.9999999999) # skutocna ocakavana pravdepodobnost nespravneho vyplnenia
randomP
pHat <- sum(rbinom(1:n,1,randomP))/n
pHat
0.2273937
0.2273937
0.2273937*200000
0.22*200000
0.228*200000
randomP <- 0.228
pHat <- sum(rbinom(1:n,1,randomP))/n
pHat
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
bounds
27*2
54/200
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:10000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/10000
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
1
sum(success)/100000
n=50
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
1
sum(success)/100000
n=100
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
n=300
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
n=500
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
n=1000
success <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
bounds
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
bounds
n
pHat
randomP
n=50
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
1
n <- 100
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
1
0.1520486/0.2126027
n <- 200
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
por
por <- 0.2126027
0.1081469/por
n <- 300
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
0.08858791/por
n <- 500
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
n <- 1000
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:100000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/100000
sum(velkosti)/100000
0.0686234/par
0.0686234/por
0.04869946/por
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
n
pHat <- sum(rbinom(1:n,1,randomP))/n
pHat
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
bounds
randomP
randomP
randomP
randomP
randomP
randomP
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
runif(n=1, min=1e-12, max=.9999999999)
randomP
pHat
bounds
success <- c()
velkosti <- c()
# 95% spolah pre aky pocet dat
for (i in 1:10000){
randomP = runif(n=1, min=1e-12, max=.9999999999)
pHat <- sum(rbinom(1:n,1,randomP))/n
bounds <- c(pHat - qnorm(.975)*sqrt((pHat*(1-pHat))/n),pHat + qnorm(.975)*sqrt(((pHat)*(1-pHat))/n))
velkosti <- c(velkosti,bounds[2]-bounds[1])
if(randomP <= bounds[2] && randomP >= bounds[1]){
success <- c(success,1)
}
else{
success <- c(success,0)
}
}
sum(success)/10000
